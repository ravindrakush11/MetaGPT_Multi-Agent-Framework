# coding: utf-8

"""
    vpn

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ModifyVpnGatewayAttributesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'description': 'str',
        'negotiate_instantly': 'str',
        'vpn_gateway_id': 'str',
        'vpn_gateway_name': 'str'
    }

    attribute_map = {
        'bandwidth': 'Bandwidth',
        'description': 'Description',
        'negotiate_instantly': 'NegotiateInstantly',
        'vpn_gateway_id': 'VpnGatewayId',
        'vpn_gateway_name': 'VpnGatewayName'
    }

    def __init__(self, bandwidth=None, description=None, negotiate_instantly=None, vpn_gateway_id=None, vpn_gateway_name=None, _configuration=None):  # noqa: E501
        """ModifyVpnGatewayAttributesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bandwidth = None
        self._description = None
        self._negotiate_instantly = None
        self._vpn_gateway_id = None
        self._vpn_gateway_name = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if description is not None:
            self.description = description
        if negotiate_instantly is not None:
            self.negotiate_instantly = negotiate_instantly
        self.vpn_gateway_id = vpn_gateway_id
        if vpn_gateway_name is not None:
            self.vpn_gateway_name = vpn_gateway_name

    @property
    def bandwidth(self):
        """Gets the bandwidth of this ModifyVpnGatewayAttributesRequest.  # noqa: E501


        :return: The bandwidth of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this ModifyVpnGatewayAttributesRequest.


        :param bandwidth: The bandwidth of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                bandwidth is not None and bandwidth > 1000):  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bandwidth is not None and bandwidth < 5):  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value greater than or equal to `5`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def description(self):
        """Gets the description of this ModifyVpnGatewayAttributesRequest.  # noqa: E501


        :return: The description of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModifyVpnGatewayAttributesRequest.


        :param description: The description of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def negotiate_instantly(self):
        """Gets the negotiate_instantly of this ModifyVpnGatewayAttributesRequest.  # noqa: E501


        :return: The negotiate_instantly of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :rtype: str
        """
        return self._negotiate_instantly

    @negotiate_instantly.setter
    def negotiate_instantly(self, negotiate_instantly):
        """Sets the negotiate_instantly of this ModifyVpnGatewayAttributesRequest.


        :param negotiate_instantly: The negotiate_instantly of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :type: str
        """

        self._negotiate_instantly = negotiate_instantly

    @property
    def vpn_gateway_id(self):
        """Gets the vpn_gateway_id of this ModifyVpnGatewayAttributesRequest.  # noqa: E501


        :return: The vpn_gateway_id of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :rtype: str
        """
        return self._vpn_gateway_id

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, vpn_gateway_id):
        """Sets the vpn_gateway_id of this ModifyVpnGatewayAttributesRequest.


        :param vpn_gateway_id: The vpn_gateway_id of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and vpn_gateway_id is None:
            raise ValueError("Invalid value for `vpn_gateway_id`, must not be `None`")  # noqa: E501

        self._vpn_gateway_id = vpn_gateway_id

    @property
    def vpn_gateway_name(self):
        """Gets the vpn_gateway_name of this ModifyVpnGatewayAttributesRequest.  # noqa: E501


        :return: The vpn_gateway_name of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :rtype: str
        """
        return self._vpn_gateway_name

    @vpn_gateway_name.setter
    def vpn_gateway_name(self, vpn_gateway_name):
        """Sets the vpn_gateway_name of this ModifyVpnGatewayAttributesRequest.


        :param vpn_gateway_name: The vpn_gateway_name of this ModifyVpnGatewayAttributesRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                vpn_gateway_name is not None and len(vpn_gateway_name) > 128):
            raise ValueError("Invalid value for `vpn_gateway_name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vpn_gateway_name is not None and len(vpn_gateway_name) < 1):
            raise ValueError("Invalid value for `vpn_gateway_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._vpn_gateway_name = vpn_gateway_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyVpnGatewayAttributesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyVpnGatewayAttributesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyVpnGatewayAttributesRequest):
            return True

        return self.to_dict() != other.to_dict()
