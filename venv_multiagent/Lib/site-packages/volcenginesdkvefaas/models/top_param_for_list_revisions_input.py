# coding: utf-8

"""
    vefaas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class TopParamForListRevisionsInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'dest_service': 'str',
        'is_internal': 'str',
        'psm': 'str',
        'real_ip': 'str',
        'region': 'str',
        'request_id': 'str',
        'role_id': 'int',
        'site': 'str',
        'source_service': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'dest_service': 'DestService',
        'is_internal': 'IsInternal',
        'psm': 'Psm',
        'real_ip': 'RealIp',
        'region': 'Region',
        'request_id': 'RequestId',
        'role_id': 'RoleId',
        'site': 'Site',
        'source_service': 'SourceService',
        'user_id': 'UserId'
    }

    def __init__(self, account_id=None, dest_service=None, is_internal=None, psm=None, real_ip=None, region=None, request_id=None, role_id=None, site=None, source_service=None, user_id=None, _configuration=None):  # noqa: E501
        """TopParamForListRevisionsInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._dest_service = None
        self._is_internal = None
        self._psm = None
        self._real_ip = None
        self._region = None
        self._request_id = None
        self._role_id = None
        self._site = None
        self._source_service = None
        self._user_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if dest_service is not None:
            self.dest_service = dest_service
        if is_internal is not None:
            self.is_internal = is_internal
        if psm is not None:
            self.psm = psm
        if real_ip is not None:
            self.real_ip = real_ip
        if region is not None:
            self.region = region
        if request_id is not None:
            self.request_id = request_id
        if role_id is not None:
            self.role_id = role_id
        if site is not None:
            self.site = site
        if source_service is not None:
            self.source_service = source_service
        if user_id is not None:
            self.user_id = user_id

    @property
    def account_id(self):
        """Gets the account_id of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The account_id of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TopParamForListRevisionsInput.


        :param account_id: The account_id of this TopParamForListRevisionsInput.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def dest_service(self):
        """Gets the dest_service of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The dest_service of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._dest_service

    @dest_service.setter
    def dest_service(self, dest_service):
        """Sets the dest_service of this TopParamForListRevisionsInput.


        :param dest_service: The dest_service of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._dest_service = dest_service

    @property
    def is_internal(self):
        """Gets the is_internal of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The is_internal of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this TopParamForListRevisionsInput.


        :param is_internal: The is_internal of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._is_internal = is_internal

    @property
    def psm(self):
        """Gets the psm of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The psm of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._psm

    @psm.setter
    def psm(self, psm):
        """Sets the psm of this TopParamForListRevisionsInput.


        :param psm: The psm of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._psm = psm

    @property
    def real_ip(self):
        """Gets the real_ip of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The real_ip of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._real_ip

    @real_ip.setter
    def real_ip(self, real_ip):
        """Sets the real_ip of this TopParamForListRevisionsInput.


        :param real_ip: The real_ip of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._real_ip = real_ip

    @property
    def region(self):
        """Gets the region of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The region of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TopParamForListRevisionsInput.


        :param region: The region of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def request_id(self):
        """Gets the request_id of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The request_id of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this TopParamForListRevisionsInput.


        :param request_id: The request_id of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def role_id(self):
        """Gets the role_id of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The role_id of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this TopParamForListRevisionsInput.


        :param role_id: The role_id of this TopParamForListRevisionsInput.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def site(self):
        """Gets the site of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The site of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this TopParamForListRevisionsInput.


        :param site: The site of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def source_service(self):
        """Gets the source_service of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The source_service of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: str
        """
        return self._source_service

    @source_service.setter
    def source_service(self, source_service):
        """Sets the source_service of this TopParamForListRevisionsInput.


        :param source_service: The source_service of this TopParamForListRevisionsInput.  # noqa: E501
        :type: str
        """

        self._source_service = source_service

    @property
    def user_id(self):
        """Gets the user_id of this TopParamForListRevisionsInput.  # noqa: E501


        :return: The user_id of this TopParamForListRevisionsInput.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TopParamForListRevisionsInput.


        :param user_id: The user_id of this TopParamForListRevisionsInput.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopParamForListRevisionsInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopParamForListRevisionsInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopParamForListRevisionsInput):
            return True

        return self.to_dict() != other.to_dict()
